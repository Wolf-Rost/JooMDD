import 'EJSL.ecore'

package eJSL

context EJSLModel
--
-- example invariant with a custom error message to verify that
-- the 'name' property of all 'eJSL::EJSLModel' instances is non-null
--
inv NonNull_name('The \'name\' property of "' + self.toString() + '" is null'):
    name <> null

-- Entities:
context Entity

-- Check if entity names are unique
inv uniqueEntityIdentifier:
Entity.allInstances()->collect('^'.concat(name))->union(Entity.allInstances()->collect(name))->isUnique(i|i)
-- Entity.allInstances()->forAll(e1, e2| e1 <> e2 implies e1.name <> e2.name and e1.name <> '^' + e2.name)
            
-- Check if attribute identifiers are unique
inv uniqueAttributeIdentifier:
self.attributes -> forAll(a1, a2| a1 <> a2 implies a1.name <> a2.name and a1.name <> '^' + a2.name)

/* The noGeneralizationCycles constraint includes this one
-- Check if entity does not extend itself
inv entityDoesNotExtendItself: 
self.supertype -> excludes(self)
*/

/*
 * Check if at least one unique (primary) attribute exists if entity does not extend another one. 
 * If so, check if closure of parent entities has a unique attribute
 */ 
inv primaryAttributeExists:
self.attributes -> exists(isunique) or self.supertype->closure(supertype).attributes-> exists(isunique)

-- Check if no generalization cycle exists (transitive closure)    
inv noGeneralizationCycles: 
self.supertype->closure(supertype)->excludes(self)

-- Check for identifiers which are not allowed (e.g. ordering, description)

context StandardTypes
-- Check if AutoIncrement is used for suitable types
inv autoIncrementForInteger:
self.type=StandardTypeKinds::Integer implies self.autoincrement

context Reference
-- Check if min/max values are -1, 0, and 1
inv allowedMinValues:
Set{'0','1'} -> includes(self.lower)

-- Check if min/max values are -1, 0, and 1
inv allowedMaxValues:
Set{'1','-1'} -> includes(self.upper)

-- Check if referenced entity exists
inv referencedEntityExists:
Entity.allInstances().name->includes(self.entity.name)

-- Check if referencedEntity and referencedEntityAttribute are consistent
inv consistentEntityAttribute:
self.entity.attributes.name->includes(attributerefereced.name->first())

-- Check if references have no cycles
inv noReferenceCycles:
self.entity.references 
    -> closure(entity.references) 
    -> forAll(r|r.attributerefereced <> self.attribute)
  
-- Check if attribute types are consistent in references
inv consistentAttributeTypes:
self.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds) = 
self.attributerefereced.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds)

-- Check if reference is a primary (unique) attribute
inv referenceIsPrimary:
self.attributerefereced -> exists(isunique) or self.attributerefereced -> exists(isprimary)

-- Pages:
-- context Page (Feature)
context Feature
-- Check if page uses an entity only once
inv useEntityOnlyOnce:
self.entities->forAll(e| self.entities->count(e) = 1)

context DetailsPage
-- Check if DetailsPageFields are consistent to attribute type of entity

--- Check if Short_Text and Link mapped to Text_Field
inv detailsPageFieldText_Field:
let attrType : Sequence =
	self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds)
	in attrType = StandardTypeKinds::Short_Text->asSequence()
	or
	attrType = StandardTypeKinds::Link->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Text_Field->asSequence()

--- Check if Text mapped to Textarea
inv detailsPageFieldTextarea:
self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds) = 
	StandardTypeKinds::Text->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Textarea->asSequence()

--- Check if Boolean mapped to Yes-No-Buttons
inv detailsPageFieldBoolean:
self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds) = 
	StandardTypeKinds::Boolean->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Yes_No_Buttons->asSequence()

--- Check if Integer mapped to Input Integer
inv detailsPageFieldInteger:
self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds) = 
	StandardTypeKinds::Integer->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Integer->asSequence()

--- Check if Time, Date and Datetime mapped to Datepicker
inv detailsPageFieldDatepicker:
let attrType : Sequence = 
self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds)
	in attrType = StandardTypeKinds::Time->asSequence() 
	or
	attrType = StandardTypeKinds::Date->asSequence() 
	or
	attrType = StandardTypeKinds::Datetime->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Datepicker->asSequence()
	
--- Check if Image mapped to Imagepicker
inv detailsPageFieldImagepicker:
self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds) = 
	StandardTypeKinds::Image->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Imagepicker->asSequence()

--- Check if File mapped to Filepicker
inv detailsPageFieldFilepicker:
self.editfields.attribute.type.oclAsType(StandardTypes).type.oclAsType(StandardTypeKinds) = 
	StandardTypeKinds::File->asSequence()
implies
	self.editfields.htmltype.oclAsType(HTMLTypes).oclAsType(SimpleHTMLTypes).htmltype.oclAsType(SimpleHTMLTypeKinds) = 
	SimpleHTMLTypeKinds::Filepicker->asSequence()

--- TODO:
--- Check if Label mapped to Text_Field NE
--- Check if Individual mapped to Text_Field

context IndexPage
-- Check if linked attribute is consistent to entity in IndexPage
inv linkedIndexAttributeConsistent:
self.links->forAll(l | self.entities.attributes.name->includes(l.linkedAttribute.name) and self.tablecolumns.name->includes(l.linkedAttribute.name))

-- Check if table columns and filters are used only once in a page
inv tableColumnsFiltersOncePerPage:
self.filters->forAll(f | self.filters->count(f) = 1) and self.tablecolumns->forAll(tc| self.tablecolumns->count(tc) = 1)

-- Check if filters are a subset of representation columns in IndexPage
inv filtersIncludedInTableColumns:
self.filters->forAll(f | self.tablecolumns->includes(f))

-- Check if entities and attributes are defined, if filters are using them
inv FilterAttributesAndEntitiesDefined:
self.filters->forAll(f| Entity.allInstances()->includes(f.oclContainer()) and f.oclContainer().oclAsType(Entity).attributes->includes(f))

-- Representation columns and filters must be consistent to *Entity in IdexPage
inv RepColsandFiltersConsistent:
self.tablecolumns->forAll(tc | self.entities->includes(tc.oclContainer()) and tc.oclContainer().oclAsType(Entity).attributes->includes(tc)) 
and self.filters->forAll(f | self.entities->includes(f.oclContainer()) and f.oclContainer().oclAsType(Entity).attributes->includes(f))

-- If a page uses more than one Entity, there can only be one main Entity that is not referenced by all other Entities
inv MultiplePageEntityReferences:
let mainEntity : Sequence(Entity) = self.entities->select(e | self.entities.references.entity->excludes(e))
	in
	entities->size() > 1
implies
	mainEntity->size() = 1

context CMSExtension
-- Check if language keys are unique for one language definition
inv uniqueLangKeys: 
-- self.extensions.languages->forAll(l | l.keyvaluepairs.name->forAll(kvn | l.keyvaluepairs.name->count(kvn) = 1))
self.extensions.languages->forAll(l | l.keyvaluepairs->forAll(kvn1, kvn2 | kvn1 <> kvn2 implies kvn1.name <> kvn2.name))

-- Unique extension names for extensions of same type
inv uniqueExtNames:
self.extensions.oclTypes()->forAll(t | self.extensions->select(oclType() = t)->isUnique(name))
-- self.extensions->forAll(e1, e2 | e1 <> e2 and e1.oclIsTypeOf(e2.oclType()) implies e1.name <> e2.name)

-- Check for valid data mapping for modules and components (is component existing...)
inv validCompModMapping:
self.extensions->
forAll(e | e.oclIsTypeOf(Module) and e.oclAsType(Module).pageRef->notEmpty() 
	implies Component.allInstances().name->includes(e.oclAsType(Module).pageRef.pagescr.ref.name)
)

-- Check if not more than one backend and frontend is defined
inv atomicBackFrontEnd:
self.extensions->forAll(e  | e.oclIsTypeOf(Component) 
	implies e.oclAsType(Component).sections->select(s | s.oclIsTypeOf(FrontendSection))->size() <= 1 and 
	e.oclAsType(Component).sections->select(s | s.oclIsTypeOf(BackendSection))->size() = 1
)

context Library
-- Check if library classes are unique
inv uniqueLibClass:
self.classes->notEmpty() implies self.classes->forAll(c1, c2 |  c1 <> c2 implies c1.name <> c2.name)

context Class
-- Check if class method names are unique in libraries
inv uniqueLibMethNames:
self.oclContainer.oclIsTypeOf(Library) implies self.methods->forAll(m1, m2 | m1 <> m2 implies m1.name <> m2.name)

endpackage